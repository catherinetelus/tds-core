// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Accordion renders a closed accordion 1`] = `
.c0 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-top: 1rem;
  padding-bottom: 1rem;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 1rem;
}

.c2 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

@media (min-width:768px) {
  .c2 {
    padding-top: 2rem;
    padding-bottom: 2rem;
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

<Accordion
  topDivider={true}
>
  <Panels
    isPanelOpen={[Function]}
    togglePanel={[Function]}
    topDivider={true}
  >
    <div
      className="base"
    >
      <HairlineDivider
        gradient={false}
        vertical={false}
      >
        <hr
          className="TDS_HairlineDivider-modules__horizontalThin___jAiIF TDS_HairlineDivider-modules__horizontal___14xom TDS_HairlineDivider-modules__reset___e92-M TDS_Spacing-modules__noSpacing___XPYDG TDS_Borders-modules__none___1fCjZ"
        />
      </HairlineDivider>
      <PanelWrapper
        key="panel-1"
        onClick={[Function]}
        open={false}
        panelDisabled={false}
        panelHeader="Panel title"
        panelId="panel-1"
      >
        <div
          data-testid="panel-1"
        >
          <div>
            <Clickable
              aria-expanded={false}
              dangerouslyAddClassName="header"
              disabled={false}
              onClick={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              type="button"
            >
              <button
                aria-expanded={false}
                className="clickable header"
                disabled={false}
                onClick={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                type="button"
              >
                <Box
                  inline={false}
                  tag="div"
                  vertical={3}
                >
                  <Box__StyledBox
                    as="div"
                    inline={false}
                    vertical={3}
                  >
                    <StyledComponent
                      as="div"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Box__StyledBox-jip4n1-0",
                            "isStatic": false,
                            "lastClassName": "c2",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Box__StyledBox",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Box__StyledBox-jip4n1-0",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inline={false}
                      vertical={3}
                    >
                      <div
                        className="c0"
                      >
                        <Box
                          between={3}
                          inline={true}
                          tag="div"
                        >
                          <Box__StyledBox
                            as="div"
                            between={3}
                            inline={true}
                          >
                            <StyledComponent
                              as="div"
                              between={3}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Box__StyledBox-jip4n1-0",
                                    "isStatic": false,
                                    "lastClassName": "c2",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Box__StyledBox",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Box__StyledBox-jip4n1-0",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              inline={true}
                            >
                              <div
                                className="c1"
                              >
                                <div>
                                  <Translate
                                    direction="y"
                                    distance="0.25rem"
                                    in={false}
                                    timeout={300}
                                  >
                                    <Transition
                                      appear={false}
                                      enter={true}
                                      exit={true}
                                      in={false}
                                      mountOnEnter={false}
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onEntering={[Function]}
                                      onExit={[Function]}
                                      onExited={[Function]}
                                      onExiting={[Function]}
                                      timeout={300}
                                      unmountOnExit={false}
                                    >
                                      <div
                                        style={
                                          Object {
                                            "transition": "transform 300ms",
                                          }
                                        }
                                      >
                                        <Text
                                          block={false}
                                          bold={false}
                                          invert={false}
                                          size="large"
                                        >
                                          <span
                                            className="TDS_Typography-modules__large___3Z5sJ TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__largeFont___3fZLf TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__color___1Jt_W"
                                          >
                                            <DecorativeIcon
                                              size={16}
                                              symbol="caretDown"
                                              variant="primary"
                                            >
                                              <Icon
                                                aria-hidden="true"
                                                size={16}
                                                symbol="caretDown"
                                                variant="primary"
                                              >
                                                <i
                                                  aria-hidden="true"
                                                  className="TDS_Icon-modules__iconCaretDown___3by8b TDS_Icon-modules__icon___13xYd TDS_Icon-modules__primary___2UY-N TDS_Icon-modules__size16___1pm12"
                                                />
                                              </Icon>
                                            </DecorativeIcon>
                                          </span>
                                        </Text>
                                      </div>
                                    </Transition>
                                  </Translate>
                                </div>
                                <Flexbox
                                  dangerouslyAddClassName="headerAlign"
                                  direction="row"
                                >
                                  <div
                                    className="row headerAlign"
                                  >
                                    <Flexbox
                                      dangerouslyAddClassName="headerAlign"
                                      direction="column"
                                    >
                                      <div
                                        className="column headerAlign"
                                      >
                                        <div
                                          className="fullWidth"
                                        >
                                          <Text
                                            block={false}
                                            bold={false}
                                            invert={false}
                                            size="large"
                                          >
                                            <span
                                              className="TDS_Typography-modules__large___3Z5sJ TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__largeFont___3fZLf TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__color___1Jt_W"
                                            >
                                              Panel title
                                            </span>
                                          </Text>
                                        </div>
                                      </div>
                                    </Flexbox>
                                  </div>
                                </Flexbox>
                              </div>
                            </StyledComponent>
                          </Box__StyledBox>
                        </Box>
                      </div>
                    </StyledComponent>
                  </Box__StyledBox>
                </Box>
              </button>
            </Clickable>
            <Reveal
              duration={500}
              height={0}
              in={false}
              timeout={0}
            >
              <Transition
                appear={false}
                duration={500}
                enter={true}
                exit={true}
                in={false}
                mountOnEnter={false}
                onEnter={[Function]}
                onEntered={[Function]}
                onEntering={[Function]}
                onExit={[Function]}
                onExited={[Function]}
                onExiting={[Function]}
                timeout={0}
                unmountOnExit={false}
              >
                <div
                  aria-hidden={true}
                  data-testid="childrenContainer"
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                      "transition": "height 500ms",
                      "visibility": "hidden",
                    }
                  }
                >
                  <div
                    data-testid="content"
                  >
                    <DimpleDivider>
                      <hr
                        className="TDS_DimpleDivider-modules__dimple___1OWjL TDS_Spacing-modules__noSpacing___XPYDG TDS_Borders-modules__none___1fCjZ"
                      />
                    </DimpleDivider>
                    <Box
                      inline={false}
                      inset={4}
                      tag="div"
                    >
                      <Box__StyledBox
                        as="div"
                        inline={false}
                        inset={4}
                      >
                        <StyledComponent
                          as="div"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Box__StyledBox-jip4n1-0",
                                "isStatic": false,
                                "lastClassName": "c2",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "Box__StyledBox",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Box__StyledBox-jip4n1-0",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          inline={false}
                          inset={4}
                        >
                          <div
                            className="c2"
                          >
                            <Text
                              block={true}
                              bold={false}
                              invert={false}
                              size="base"
                            >
                              <span
                                className="TDS_Typography-modules__base___gCTVZ TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__baseFont___2g1ZX TDS_Typography-modules__color___1Jt_W TDS_Typography-modules__blockText___2DsZN"
                              >
                                <Panel
                                  disabled={false}
                                  header="Panel title"
                                  id="panel-1"
                                  key=".0"
                                >
                                  <div>
                                    Panel content
                                  </div>
                                </Panel>
                              </span>
                            </Text>
                          </div>
                        </StyledComponent>
                      </Box__StyledBox>
                    </Box>
                  </div>
                </div>
              </Transition>
            </Reveal>
            <HairlineDivider
              gradient={false}
              vertical={false}
            >
              <hr
                className="TDS_HairlineDivider-modules__horizontalThin___jAiIF TDS_HairlineDivider-modules__horizontal___14xom TDS_HairlineDivider-modules__reset___e92-M TDS_Spacing-modules__noSpacing___XPYDG TDS_Borders-modules__none___1fCjZ"
              />
            </HairlineDivider>
          </div>
        </div>
      </PanelWrapper>
    </div>
  </Panels>
</Accordion>
`;

exports[`Accordion renders an open accordion 1`] = `
.c0 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-top: 1rem;
  padding-bottom: 1rem;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
}

.c1 > *:not(:last-child) {
  margin-right: 1rem;
}

.c2 {
  display: block;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

@media (min-width:768px) {
  .c2 {
    padding-top: 2rem;
    padding-bottom: 2rem;
    padding-left: 2rem;
    padding-right: 2rem;
  }
}

<Accordion
  open="panel-1"
  topDivider={true}
>
  <Panels
    isPanelOpen={[Function]}
    open="panel-1"
    togglePanel={[Function]}
    topDivider={true}
  >
    <div
      className="base"
      open="panel-1"
    >
      <HairlineDivider
        gradient={false}
        vertical={false}
      >
        <hr
          className="TDS_HairlineDivider-modules__horizontalThin___jAiIF TDS_HairlineDivider-modules__horizontal___14xom TDS_HairlineDivider-modules__reset___e92-M TDS_Spacing-modules__noSpacing___XPYDG TDS_Borders-modules__none___1fCjZ"
        />
      </HairlineDivider>
      <PanelWrapper
        key="panel-1"
        onClick={[Function]}
        open={true}
        panelDisabled={false}
        panelHeader="Panel title"
        panelId="panel-1"
      >
        <div
          data-testid="panel-1"
        >
          <div>
            <Clickable
              aria-expanded={true}
              dangerouslyAddClassName="header"
              disabled={false}
              onClick={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              type="button"
            >
              <button
                aria-expanded={true}
                className="clickable header"
                disabled={false}
                onClick={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
                type="button"
              >
                <Box
                  inline={false}
                  tag="div"
                  vertical={3}
                >
                  <Box__StyledBox
                    as="div"
                    inline={false}
                    vertical={3}
                  >
                    <StyledComponent
                      as="div"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Box__StyledBox-jip4n1-0",
                            "isStatic": false,
                            "lastClassName": "c2",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Box__StyledBox",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Box__StyledBox-jip4n1-0",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      inline={false}
                      vertical={3}
                    >
                      <div
                        className="c0"
                      >
                        <Box
                          between={3}
                          inline={true}
                          tag="div"
                        >
                          <Box__StyledBox
                            as="div"
                            between={3}
                            inline={true}
                          >
                            <StyledComponent
                              as="div"
                              between={3}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Box__StyledBox-jip4n1-0",
                                    "isStatic": false,
                                    "lastClassName": "c2",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Box__StyledBox",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Box__StyledBox-jip4n1-0",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              inline={true}
                            >
                              <div
                                className="c1"
                              >
                                <div>
                                  <Translate
                                    direction="y"
                                    distance="-0.25rem"
                                    in={false}
                                    timeout={300}
                                  >
                                    <Transition
                                      appear={false}
                                      enter={true}
                                      exit={true}
                                      in={false}
                                      mountOnEnter={false}
                                      onEnter={[Function]}
                                      onEntered={[Function]}
                                      onEntering={[Function]}
                                      onExit={[Function]}
                                      onExited={[Function]}
                                      onExiting={[Function]}
                                      timeout={300}
                                      unmountOnExit={false}
                                    >
                                      <div
                                        style={
                                          Object {
                                            "transition": "transform 300ms",
                                          }
                                        }
                                      >
                                        <Text
                                          block={false}
                                          bold={false}
                                          invert={false}
                                          size="large"
                                        >
                                          <span
                                            className="TDS_Typography-modules__large___3Z5sJ TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__largeFont___3fZLf TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__color___1Jt_W"
                                          >
                                            <DecorativeIcon
                                              size={16}
                                              symbol="caretUp"
                                              variant="primary"
                                            >
                                              <Icon
                                                aria-hidden="true"
                                                size={16}
                                                symbol="caretUp"
                                                variant="primary"
                                              >
                                                <i
                                                  aria-hidden="true"
                                                  className="TDS_Icon-modules__iconCaretUp___3PL_K TDS_Icon-modules__icon___13xYd TDS_Icon-modules__primary___2UY-N TDS_Icon-modules__size16___1pm12"
                                                />
                                              </Icon>
                                            </DecorativeIcon>
                                          </span>
                                        </Text>
                                      </div>
                                    </Transition>
                                  </Translate>
                                </div>
                                <Flexbox
                                  dangerouslyAddClassName="headerAlign"
                                  direction="row"
                                >
                                  <div
                                    className="row headerAlign"
                                  >
                                    <Flexbox
                                      dangerouslyAddClassName="headerAlign"
                                      direction="column"
                                    >
                                      <div
                                        className="column headerAlign"
                                      >
                                        <div
                                          className="fullWidth"
                                        >
                                          <Text
                                            block={false}
                                            bold={false}
                                            invert={false}
                                            size="large"
                                          >
                                            <span
                                              className="TDS_Typography-modules__large___3Z5sJ TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__largeFont___3fZLf TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__color___1Jt_W"
                                            >
                                              Panel title
                                            </span>
                                          </Text>
                                        </div>
                                      </div>
                                    </Flexbox>
                                  </div>
                                </Flexbox>
                              </div>
                            </StyledComponent>
                          </Box__StyledBox>
                        </Box>
                      </div>
                    </StyledComponent>
                  </Box__StyledBox>
                </Box>
              </button>
            </Clickable>
            <Reveal
              duration={500}
              height={0}
              in={true}
              timeout={500}
            >
              <Transition
                appear={false}
                duration={500}
                enter={true}
                exit={true}
                in={true}
                mountOnEnter={false}
                onEnter={[Function]}
                onEntered={[Function]}
                onEntering={[Function]}
                onExit={[Function]}
                onExited={[Function]}
                onExiting={[Function]}
                timeout={500}
                unmountOnExit={false}
              >
                <div
                  aria-hidden={false}
                  data-testid="childrenContainer"
                  style={
                    Object {
                      "height": "auto",
                      "overflow": "hidden",
                      "transition": "height 500ms",
                    }
                  }
                >
                  <div
                    data-testid="content"
                  >
                    <DimpleDivider>
                      <hr
                        className="TDS_DimpleDivider-modules__dimple___1OWjL TDS_Spacing-modules__noSpacing___XPYDG TDS_Borders-modules__none___1fCjZ"
                      />
                    </DimpleDivider>
                    <Box
                      inline={false}
                      inset={4}
                      tag="div"
                    >
                      <Box__StyledBox
                        as="div"
                        inline={false}
                        inset={4}
                      >
                        <StyledComponent
                          as="div"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "Box__StyledBox-jip4n1-0",
                                "isStatic": false,
                                "lastClassName": "c2",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "Box__StyledBox",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "Box__StyledBox-jip4n1-0",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          inline={false}
                          inset={4}
                        >
                          <div
                            className="c2"
                          >
                            <Text
                              block={true}
                              bold={false}
                              invert={false}
                              size="base"
                            >
                              <span
                                className="TDS_Typography-modules__base___gCTVZ TDS_Typography-modules__wordBreak___3dmWU TDS_Typography-modules__baseFont___2g1ZX TDS_Typography-modules__color___1Jt_W TDS_Typography-modules__blockText___2DsZN"
                              >
                                <Panel
                                  disabled={false}
                                  header="Panel title"
                                  id="panel-1"
                                  key=".0"
                                >
                                  <div>
                                    Panel content
                                  </div>
                                </Panel>
                              </span>
                            </Text>
                          </div>
                        </StyledComponent>
                      </Box__StyledBox>
                    </Box>
                  </div>
                </div>
              </Transition>
            </Reveal>
            <HairlineDivider
              gradient={false}
              vertical={false}
            >
              <hr
                className="TDS_HairlineDivider-modules__horizontalThin___jAiIF TDS_HairlineDivider-modules__horizontal___14xom TDS_HairlineDivider-modules__reset___e92-M TDS_Spacing-modules__noSpacing___XPYDG TDS_Borders-modules__none___1fCjZ"
              />
            </HairlineDivider>
          </div>
        </div>
      </PanelWrapper>
    </div>
  </Panels>
</Accordion>
`;
